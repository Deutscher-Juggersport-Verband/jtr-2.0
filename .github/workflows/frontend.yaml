name: frontend

on: [push]

permissions:
  actions: read
  contents: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-frontend-${{ hashFiles('frontend/Dockerfile.test', 'frontend/**') }}
          restore-keys: |
            ${{ runner.os }}-docker-frontend-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Build frontend image with cache
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            -t frontend-test -f ./frontend/Dockerfile.test ./frontend --load

      - name: Save frontend-test image
        run: docker save -o frontend-test.tar frontend-test

      - name: Upload frontend-test artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-image
          path: frontend-test.tar

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-test-image

      - name: Load frontend-test image
        run: docker load -i frontend-test.tar

      - name: Run tests
        run: |
          set -e

          docker run frontend-test nx run-many --target=test --all

  code-style:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-test-image

      - name: Load frontend-test image
        run: docker load -i frontend-test.tar

      - name: Run code style checks on all projects
        run: |
          set -e

          docker run frontend-test nx run-many --target=lint --all
