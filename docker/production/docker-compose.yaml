services:

  mysql:
    image: mysql:8.0.35
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'jtr'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    volumes:
      - mysql_db_data:/var/lib/mysql
    networks:
      - backend_network

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - backend_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: mypass
    ports:
      - "15672:15672"
    networks:
      - backend_network

  worker:
    build:
      context: ../../
      dockerfile: docker/production/worker/worker.Dockerfile
    user: nobody
    container_name: worker
    environment:
      CELERY_APP_NAME: 'tasks'
      CELERY_WORKER_URL: 'amqp://admin:mypass@rabbitmq:5672'
      CELERY_RESULT_BACKEND: 'rpc://'
      DATABASE_URL: 'mysql+pymysql://user:password@mysql/jtr'
      MAIL_SERVER: 'localhost'
      MAIL_PORT: '25'
      MAIL_USE_TLS: 'False'
      MAIL_USERNAME: None
      MAIL_PASSWORD: None
    depends_on:
      - mysql
      - rabbitmq
      - backend
    networks:
      - backend_network

  certbot:
    build:
      context: ../../
      dockerfile: docker/production/certbot/certbot.Dockerfile
    container_name: certbot
    environment:
      CERTBOT_DOMAIN: 'jugger-tourna.de'
      CERTBOT_EMAIL: 'slotosch.leander@outlook.de'
    volumes:
      - certs:/etc/letsencrypt
      - webroot:/usr/share/nginx/html
    networks:
      - backend_network

  backend:
    build:
      context: ../../
      dockerfile: docker/production/backend/backend.Dockerfile
    container_name: backend
    environment:
      FLASK_ENV: 'production'
      CACHE_REDIS_HOST: 'redis'
      CACHE_REDIS_PORT: '6379'
      CELERY_BROKER_NAME: 'worker'
      CELERY_BACKEND_URL: 'amqp://admin:mypass@rabbitmq:5672'
      CELERY_RESULT_BACKEND: 'rpc://'
      DATABASE_URL: 'mysql+pymysql://user:password@mysql/jtr'
      SECRET_KEY: 'secret'
      GENERATE_TEST_DATA: True
    volumes:
      - certs:/etc/letsencrypt
      - ./assets:/app/DataDomain/assets
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - certbot
    networks:
      - backend_network

  frontend:
    build:
      context: ../../
      dockerfile: docker/production/frontend/frontend.Dockerfile
    container_name: frontend
    volumes:
      - certs:/etc/letsencrypt
      - webroot:/usr/share/nginx/html
      - ./assets:/usr/share/nginx/html/assets
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - certbot
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  mysql_db_data: {}
  certs:
    driver: local
    driver_opts:
      type: none
      device: ./nginx
      o: bind
  webroot:
